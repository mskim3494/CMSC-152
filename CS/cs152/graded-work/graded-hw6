===== ss.h =====

/* Min Su Kim, mskim3494 */
/* CMSC 152, Winter 2015 */
/* HOMEWORK 5 */

#include <stdlib.h>
#include <stdio.h>
#include <math.h>
#include <string.h>

typedef struct squeezed_string squeezed_string;

struct squeezed_string {
    unsigned char *array;
    unsigned int alen;
    unsigned int clen;
};

/* normalize : char -> char */
/* normalizes the char into upper-case */
unsigned char normalize (char c);

/* capitalize : char -> char */
/* capitalize the character, give "garbage" number 28 otherwise */
char capitalize (char c);

void show_binary(unsigned char* s);

void show_ss(squeezed_string *ss);

/* squeezed : char -> char* */
/* converts the char into an array with its squeezed equivalent */
unsigned char* binary(unsigned char c);

/* ss_read : squeezed_string, unsigned int -> char */
/* translate the squeezed string into an ASCII char
 * starting from i */
char ss_read(squeezed_string* ss, unsigned int i);

/* ss_write : squeezed_string, unsigned int, char -> void */
/* squeezes the char into the ss starting at point i */
void ss_write(squeezed_string* ss, unsigned int i, char c);

/* squeeze : char* -> squeezed_string* */
/* converts from ASCII code to squeezed string */
squeezed_string* squeeze(char* s);

/* unsqueeze : squeezed_string* -> char* */
/* coverts from a squeezed string* to a ASCII */
char* unsqueeze(squeezed_string* ss);

/* free_squeezed_string : squeezed_string -> void */
/* frees a squeezed string */
void free_squeezed_string(squeezed_string* ss);

===== ss.c =====

/* Min Su Kim, mskim3494 */
/* CMSC 152, Winter 2015 */
/* HOMEWORK 5 */

#include <stdlib.h>
#include <stdio.h>
#include <math.h>
#include <string.h>

#include "ss.h"

unsigned char normalize (char c)
{
    if (c<91 && c>64){
        return c-64;
    } else if (c<123 && c>96){
        return c-96;
    } else if (c == 32) {
        return c-32;
    } else {
        return 28;
    }
}

char capitalize (char c)
{
    if (c<91 && c>64){
        return c;
    } else if (c<123 && c>96){
        return c-32;
    } else if (c == 32) {
        return c;
    } else {
        return 28;
    }
}

unsigned char* binary(unsigned char c)
{
    unsigned char* tmp= malloc(5*sizeof(unsigned char));
    if(tmp==NULL){
        fprintf(stderr, "malloc failed");
        exit(1);
    } else {
        int i;
        for(i=0; i<5;i++){
            if(c==0){
                tmp[4-i]=0;
            }else {
                tmp[4-i]=
                ((c%2)==1? 1 : 0);
                c= c/2;
            }
        }return tmp;
    }
}

void show_binary(unsigned char* s)
{
    int i;
    for(i=0;i<5;i++){
        printf("%d", s[i]);
    } printf("\n");
}

void ss_write(squeezed_string* ss, unsigned int i, char c)
{
    int bit_num,byte_num,j;
    unsigned char y,z;
    y=z=0;
    bit_num= (i==0? 0 : (5*i%8));
    byte_num= 5*i/8;
    if(i>ss->clen){
        fprintf(stderr,"index out of bounds\n");
        exit(1);
    } else {
        if(c==32||(c<='Z' && c>='A')){
            unsigned char *k=binary(normalize(c));
            for(j=0;j<5;j++){
                if(bit_num>7){
                    if(k[j]!=0){
                        z+=(unsigned char) pow(2,14-(bit_num++));
                    } bit_num++;
                } else if(k[j]!=0){
                    y+=(unsigned char) pow(2,7-(bit_num++));
                } else {
                    bit_num++;
                }
            } ss->array[byte_num]= ss->array[byte_num] | y;
            ss->array[byte_num+1]= ss->array[byte_num+1] | z;
            free(k);
        } else {
            fprintf(stderr,"invalid ASCII\n");
            exit(1);
        }
    }
}

squeezed_string* squeeze(char* s)
{
    squeezed_string* nss=malloc(sizeof(squeezed_string));
    int len= strlen(s);
    int i=0;
    float random=(5*len/8);
    int x= (random-(int)random)==0 ? (int)random : (int) random+1;
    int* k= &x;
    nss->clen= len;
    nss->alen= *k;
    int s_array= *k + (8-((*k)%8)); /*to make multiple of 8 */
    nss->array= malloc(s_array*sizeof(unsigned char));
    for(i=0;i<*k; i++){
        nss->array[i]=0;
    } for(i=0;i<len; i++){
        ss_write(nss, i, capitalize(s[i]));
    }
    return nss;
}

void show_ss(squeezed_string *ss)
{
    int i;
    for(i=0;i<ss->alen;i++){
        printf("%d", ss->array[i]);
    } printf("\n %d\n",ss->alen);
}

char ss_read(squeezed_string* ss, unsigned int i)
{
    int bit_num,byte_num,j;
    unsigned char x,y,z;
    y=z=0;
    bit_num= (i==0? 0 : (5*i%8));
    byte_num= 5*i/8;
    if(i>ss->clen){
        fprintf(stderr,"index out of bounds\n");
        exit(1);
    } else {
        for(j=0;j<5;j++){
            if(bit_num>7){
                z+=(unsigned char) pow(2,14-(bit_num++));
            } else {
                y+=(unsigned char) pow(2, 7-(bit_num++));
            }
        } y= ss->array[byte_num] & y;
        z= ss->array[byte_num+1] & z;
        x=y+z;
        return (x==0? 32 : x+64);
    }
}


char* unsqueeze(squeezed_string* ss)
{
    char* unsqueezed= malloc(ss->clen* sizeof(char));
    int i,k;
    char j=0;
    k=0;
    for(i=0;i<ss->clen; i++){
        j=ss_read(ss,i);
        unsqueezed[k++]=j;
    } return unsqueezed;
}

void free_squeezed_string(squeezed_string* ss)
{
    free(ss->array);
    free(ss);
}
===== matrix.h =====

/* Min Su Kim, mskim3494 */
/* CMSC 152, Winter 2015 */
/* HOMEWORK 5 */

#include <stdlib.h>
#include <stdio.h>
#include <math.h>
#include <string.h>

#ifndef _MATRIX_H
#define _MATRIX_H

typedef struct matrix matrix;

struct matrix {
    unsigned int n_rows;
    unsigned int n_cols;
    float **entries;
};

/* matrix_zero : int, int -> matrix*    */
/* - build a matrix of given dimension, */
/*   all entries 0.0                    */
matrix *matrix_zero(int n_rows, int n_cols);

/* matrix_read : matrix*, unsigned int, unsigned int -> float      */
/* - read the item at row i, column j            */
/* - error if row, column are outside the matrix */
float matrix_read(matrix *m, unsigned int i, unsigned int j);

/* matrix_write : matrix*, unsigned int, unsigned int, float -> [void] */
/* - write the float values to the location          */
/* - error if row, column are outside the matrix     */
void matrix_write(matrix *m, unsigned int i, unsigned int j, float x);

/* matrix_add : matrix*, matrix* -> matrix* */
/* - add two matrices non-destructively     */
/*   (i.e., construct a new matrix)         */
/* - error if matrices' dimensions differ   */
matrix *matrix_add(matrix *m, matrix *n);

/* matrix_mult : matrix*, matrix* -> matrix*                  */
/* - multiply two matrices, constructing a new matrix         */
/* - error if dimensions don't allow matrix multiplication    */
/* - note: this is matrix multiplication, not pairwise product */
matrix *matrix_mult(matrix *m, matrix *n);

/* matrix_show : matrix* -> [void] */
void matrix_show(matrix *m);

/* matrix_free : matrix* -> [void] */
void matrix_free(matrix *m);

#endif /* _MATRIX_H */
===== matrix.c =====

/* Min Su Kim, mskim3494 */
/* CMSC 152, Winter 2015 */
/* HOMEWORK 5 */

#include <stdlib.h>
#include <stdio.h>
#include <math.h>
#include <string.h>

#include "matrix.h"

matrix *matrix_zero(int n_rows, int n_cols)
{
    int i,j;
    matrix* new= malloc(sizeof(matrix));
    new->n_rows=n_rows;
    new->n_cols=n_cols;
    float** tmp=malloc(n_rows*sizeof(float*));
    for(i=0;i<n_cols;i++){
        tmp[i]=malloc(n_cols*sizeof(float));
    }
    for(i=0;i<n_rows;i++){
        for(j=0;j<n_cols;j++){
            tmp[i][j]=0.0;
        }
    } new->entries=tmp;
    return new;
}
/* #grader: segfaults */

float matrix_read(matrix *m, unsigned int i, unsigned int j)
{
    if(i>=m->n_rows||j>=m->n_cols){
        fprintf(stderr, "out of index");
        exit(1);
    } else {
        return m->entries[i][j];
    }
}

void matrix_write(matrix *m, unsigned int i, unsigned int j, float x)
{
    if(i>=m->n_rows||j>=m->n_cols){
        fprintf(stderr, "out of index");
        exit(1);
    } else {
        m->entries[i][j]=x;
    }
}

matrix *matrix_add(matrix *m, matrix *n)
{
    if(m->n_cols!=n->n_cols||m->n_rows!=n->n_rows){
        fprintf(stderr, "different dimensions");
        exit(1);
    } else {
        int i,j;
        matrix* summed=matrix_zero(m->n_rows, m->n_cols);
        for(i=0;i<m->n_rows;i++){
            for(j=0;j<m->n_cols;j++){
                summed->entries[i][j]=m->entries[i][j] + n->entries[i][j];
            }
        } return summed;
    }
}

matrix *matrix_mult(matrix *m, matrix *n)
{
    if(m->n_cols!=n->n_rows){
        fprintf(stderr, "differing dimensions");
        exit(1);
    } else {
        int i,j,k;
        double acc=0;
        matrix* mult=matrix_zero(m->n_rows,n->n_cols);
        for(i=0;i<m->n_rows;i++){
            for(j=0;j<n->n_cols;j++){
                acc=0.0;
                for(k=0;k<m->n_cols;k++){
                    acc+= m->entries[i][k]*n->entries[k][j];
                } mult->entries[i][j]=acc;
            }
        } return mult;
    }
}

void matrix_show(matrix *m)
{
    int i,j;
    for(i=0;i<m->n_rows;i++){
        for(j=0;j<m->n_cols;j++){
            printf("[%f] ", m->entries[i][j]);
        } printf("\n");
    }
}

void matrix_free(matrix *m)
{
    int i;
    for(i=0;i<m->n_rows;i++){
        free(m->entries[i]);
    }free(m->entries);
    free(m);
}














===== sll.h =====

#ifndef _SLL_H
#define _SLL_H

/* linked lists of strings */

typedef struct sll sll;
struct sll {
  char *s;
  sll *next;
};

/* By convention, the empty list is NULL. */

/* sll_cons : (char*, sll*) -> sll* */
/* build new list with given string at the head */
/* note: copy the given string to the list (deep copy) */
sll *sll_cons(char *s, sll *ss);

/* sll_length : sll* -> int */
/* return the number of strings in the given list */
unsigned int sll_length(sll *ss);

/* sll_member : (char*, sll*) -> int */
/* test membership of given string in given list */
/* use strcmp to compare strings */
int sll_member(char *s, sll *ss);

/* sll_show : sll* -> <void> */
/* print a representation of the linked list to stdout */
void sll_show(sll *ss);

/* sll_free : sll* -> <void> */
/* free all strings pointed to as well */
void sll_free(sll *ss);

#endif /* _SLL_H */

===== sll.c =====

/* Min Su Kim, mskim3494 */
/* CMSC 152, Winter 2015 */
/* Lab 5 */

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <strings.h>
#include <ctype.h>

#include "sll.h"

sll *sll_cons(char *s, sll *ss)
{
    sll* tmp= malloc(sizeof(sll));
    tmp->s=strdup(s);
    tmp->next=ss;
    return tmp;
}

unsigned int sll_length(sll *ss)
{
    if (ss == NULL){
        return 0;
    } else if(ss->next == NULL){
        return 1;
    } else {
        return 1 + sll_length(ss->next);
    }
}

int sll_member(char *s, sll *ss)
{
    if (ss == NULL){
        return 0;
    } else {
        int cmp = strcmp(s, ss->s);
        if (cmp == 0){
            return 1;
        } else {
            return sll_member(s, ss->next);
        }
    }
}

void sll_show(sll *ss)
{
    if (ss==NULL){
        printf("\n");
    } else {
        printf("%s, ", ss->s);
        sll_show(ss->next);
    }
}

void sll_free(sll *ss)
{
    if(ss==NULL){
        return;
    } else {
        sll_free(ss->next);
        free(ss->s);
        free(ss);
    }
}
===== htbl.h =====

#ifndef _HTBL_H
#define _HTBL_H

#include "sll.h"

/* hash table of strings, with linked list buckets */

struct hash_table {
  unsigned long int(*hash)(char *);
  unsigned int n_buckets;
  sll **buckets; /* an array of pointers to string lists */
};
typedef struct hash_table htbl;

/* good_hash : char -> unsigned int */
/* compute hash code for given string */
/* see web page for algorithm */
unsigned long int good_hash(char *s);

/* bad_hash : char -> unsigned int */
/* implement this however you like, as long as it's bad */
unsigned long int bad_hash(char *s);

/* ht_new : (string -> unsigned long) int -> htbl* */
/* allocate space for a new hash table of given size */
/* all buckets must initially contain the empty list */
htbl *ht_new(unsigned long int(*h)(char*), unsigned int sz);

/* ht_n_entries : htbl* -> unsigned int */
/* return the total number of entries in all buckets */
unsigned int ht_n_entries(htbl *t);

/* ht_load_factor : htbl* -> float */
/* The load factor is the mean number of elements per bucket. */
double ht_load_factor(htbl *t);

/* ht_max_bucket : htbl* -> unsigned int */
/* Report the number of items in the fullest bucket. */
/* (Ideally, the max bucket has 1 item in it.) */
unsigned int ht_max_bucket(htbl *t);

/* ht_ins : (char*, htbl*) -> int */ 
/* add string s to hash table t */
/* no special treatment for duplicates, just insert them again */
/* return the number of strings in s's bucket after inserting it */
unsigned int ht_ins(char *s, htbl *t);

/* ht_ins_list : (string_list*, htbl*) -> int */ 
/* add strings to hash table t */
void ht_ins_list(sll *ss, htbl *t);

/* ht_member : (char*, htbl*) -> int */
/* test membership of given string in given table */
int ht_member(char *s, htbl *t);

/* ht_show : htbl* -> <void> */
/* print a representation of the hash table to stdout */
void ht_show(htbl *t);

/* ht_free : htbl* -> <void> */
void ht_free(htbl *t);

/* is_prime : unsigned int -> int */
/* checks if number is prime or not */
/* steps to algorithm found on internet
 * following implementation of AKS primality test */
int is_prime(unsigned int a);

/* resize : htbl* unsigned int -> void */
/* resize htbl based on the given size */
void resize(htbl *t, unsigned size);

/* ht_resize : htbl** -> void */
/* resizes the hash table if necessary */
void ht_resize(htbl **t);

#endif /* _HTBL_H */

===== htbl.c =====

/* Min Su Kim, mskim3494 */
/* CMSC 152, Winter 2015 */
/* Lab 5 */

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <strings.h>
/* #grader: string.h */
#include <ctype.h>

#include "htbl.h"
#include "sll.h"

unsigned long int good_hash(char *s)
{
    unsigned long res=17;
    int i,l;
    l= strlen(s);
    for(i=0; i<l; i++){
        res += 37* s[i];
    } return res;
}

/* bad_hash : char -> unsigned int */
/* implement this however you like, as long as it's bad */
unsigned long int bad_hash(char *s)
{
    return strlen(s);
}

/* ht_new : (string -> unsigned long) int -> htbl* */
/* allocate space for a new hash table of given size */
/* all buckets must initially contain the empty list */
htbl *ht_new(unsigned long int(*h)(char*), unsigned int sz)
{
    int i;
    htbl* nhtbl = malloc(sizeof(htbl));
    sll** nbuckets= malloc(sz*sizeof(sll*));
    nhtbl->hash= h;
    nhtbl->n_buckets= sz;
    for(i=0; i<sz; i++){
        nbuckets[i]=NULL;
    } nhtbl->buckets= nbuckets;
    return nhtbl;
}

/* ht_n_entries : htbl* -> unsigned int */
/* return the total number of entries in all buckets */
unsigned int ht_n_entries(htbl *t)
{
    int n_b= t->n_buckets;
    int i;
    int acc=0;
    for(i=0; i<n_b; i++){
        acc+= sll_length(t->buckets[i]);
    } return acc;
}

/* ht_load_factor : htbl* -> float */
/* The load factor is the mean number of elements per bucket. */
double ht_load_factor(htbl *t)
{
    return (double) ht_n_entries(t)/t->n_buckets;
    
}

/* ht_max_bucket : htbl* -> unsigned int */
/* Report the number of items in the fullest bucket. */
/* (Ideally, the max bucket has 1 item in it.) */
unsigned int ht_max_bucket(htbl *t)
{
    int n_b= t->n_buckets;
    int i;
    int max=0;
    for(i=0; i<n_b; i++){
        if(max < sll_length(t->buckets[i])){
            max = sll_length(t->buckets[i]);
        }
    } return max;
}

/* ht_ins : (char*, htbl*) -> int */
/* add string s to hash table t */
/* no special treatment for duplicates, just insert them again */
/* return the number of strings in s's bucket after inserting it */
unsigned int ht_ins(char *s, htbl *t)
{
    int n=(*(t->hash))(s) % t->n_buckets;
    t->buckets[n]=sll_cons(s,t->buckets[n]);
    return sll_length(t->buckets[n]);
}

/* ht_ins_list : (string_list*, htbl*) -> int */
/* add strings to hash table t */
void ht_ins_list(sll *ss, htbl *t)
{
    int i;
    sll* tmp= ss;
    int l= sll_length(ss);
    for(i=0; i<l; i++){
        ht_ins(tmp->s, t);
        tmp=tmp->next;
    }
}

/* ht_member : (char*, htbl*) -> int */
/* test membership of given string in given table */
int ht_member(char *s, htbl *t)
{
    int bucket=(*(t->hash))(s) % t->n_buckets;
    return sll_member(s, t->buckets[bucket]);
}

/* ht_show : htbl* -> <void> */
/* print a representation of the hash table to stdout */
void ht_show(htbl *t)
{
    int l = t->n_buckets;
    int i;
    for(i=0; i<l; i++){
        printf("bucket #%d = ", i);
        sll_show(t->buckets[i]);
    }
}

/* ht_free : htbl* -> <void> */
void ht_free(htbl *t)
{
    int i=0;
    int l= t->n_buckets;
    for(i=0; i<l; i++){
        sll_free(t->buckets[i]);
    } free(t->buckets);
    free(t);
}

int is_prime(unsigned int a)
{
    int i;
    if (a<=3){
        return 1;
    } else if(a%2==0||a%3==0){
        return 0;
    } else {
        for(i=5;i*i<=a;i+=6){
            if(a%i==0||a%(i+2)==0){
                return 0;
            }
        } return 1;
    }
}

void resize(htbl *t, unsigned size)
{
    int i,o_size;
    sll** new= malloc(size*sizeof(sll*));
    for(i=0; i<size; i++){
        new[i]=NULL;
    } sll** tmp=malloc(sizeof(sll*));
    tmp= t->buckets;
    t->buckets=new;
    o_size=t->n_buckets;
    t->n_buckets=size;
    for(i=0;i<o_size;i++){
        ht_ins_list(tmp[i], t);
    } for(i=0;i<o_size;i++){
        sll_free(tmp[i]);
    } free(tmp);
}

void ht_resize(htbl **t)
{
    double n=ht_load_factor((*t));
    if(t==NULL || (n>=0.8 && n<=1.2)){
        return;
    } else {

    /* #grader: not compatible w/ this version of C */
        for(int i=1; i<ht_n_entries((*t))*2; i++){
            if(is_prime(i)){
                resize((*t),i);
                if(ht_load_factor((*t))<=1.2){
                    break;
                }
            }
        }
    }
}



===== hw6_evidence.c =====

/* Min Su Kim, mskim3494 */
/* CMSC 152, Winter 2015 */
/* HOMEWORK 5 */

#include <stdlib.h>
#include <stdio.h>
#include <math.h>
#include <string.h>

#include "ss.h"
#include "htbl.h"
#include "sll.h"
#include "matrix.h"

void evidence_ss()
{
    printf(" === testing squeezed strings ===\n");
    char test_s[]="hello world";
    printf(" --- testing capitalize/normalize --- \n");
    printf("expecting H, %c\n", capitalize('h'));
    printf("expecting 8, %d\n", normalize('h'));
    squeezed_string* test_ss= squeeze(test_s);
    unsigned char* B= binary('B');
    printf("expecting 00010, ");
    show_binary(B);
    free(B);
    printf(" --- testing ss_read ---\n");
    show_ss(test_ss);
    printf("expecting H, %c\n", ss_read(test_ss,0));
    printf("expecting E, %c\n", ss_read(test_ss,5));
    printf("expecting ' ', '%c'\n",ss_read(test_ss,6));
    char* test=unsqueeze(test_ss);
    printf("expecting HELLO WORLD, %s\n", test);
    char garbage[]="@$%%&hi my friend$#%";
    squeezed_string* test_garbage= squeeze(garbage);
    char* unsqueezed_garbage= unsqueeze(test_garbage);
    printf("expecting no garbage -> %s\n\n", unsqueezed_garbage);
    free_squeezed_string(test_ss);
    free_squeezed_string(test_garbage);
    free(test);
    free(unsqueezed_garbage);
}

void evidence_resize()
{
    printf(" === testing is_prime===\n");
    printf("expecting 1, %d\n", is_prime(7));
    printf("expecting 0, %d\n", is_prime(224));
    printf("expecting 1, %d\n\n", is_prime(223));
    
    printf(" === testing ht_resize ===\n");
    int i;
    htbl* t=ht_new((&good_hash), 3);
    sll* tmp=malloc(sizeof(sll));
    tmp->s="i'm hungry";
    tmp->next=NULL;
    char* s[]= {"hi","I","love","bannanas","so","much","I","am","so","hungry"};
    for(i=0;i<10;i++){
        tmp=sll_cons(s[i],tmp);
    } ht_ins_list(tmp, t);
    ht_show(t);
    printf("original load factor %f\n", ht_load_factor(t));
    printf("original number of buckets %d\n\n", t->n_buckets);
    printf("resize\n");
    ht_resize(&t);
    printf("new load factor %f\n", ht_load_factor(t));
    printf("new number of buckets %d\n", t->n_buckets);
    ht_show(t);
    ht_free(t);
    printf("\n");
}

void evidence_matrix()
{
    printf(" === testing matrix ===\n");
    matrix* test1= matrix_zero(2,2);
    matrix* test2= matrix_zero(2,2);
    printf("expecting 0.0, %f\n",test1->entries[1][1]);
    matrix_write(test1, 0,0, 1);
    matrix_write(test1, 0,1, 3);
    matrix_write(test1, 1,0, 5);
    matrix_write(test1, 1,1, 1.5);
    printf("expecting 1.5, %f\n",test1->entries[1][1]);
    matrix_write(test2,0,0,2);
    matrix_write(test2,0,1,4.0);
    matrix_write(test2,1,0,2.0);
    matrix_write(test2,1,1,2.0);
    printf("expecting 4, %f\n",test2->entries[0][1]);
    matrix* test3= matrix_add(test1,test2);
    printf("testing add, expecting 3 7 7 3.5\n");
    matrix_show(test3);
    matrix* test4= matrix_mult(test1, test2);
    printf("testing mult, expecting 8 10 13 23\n");
    matrix_show(test4);
    matrix_free(test1);
    matrix_free(test2);
    matrix_free(test3);
    matrix_free(test4);
}

int main()
{
    evidence_resize();
    evidence_matrix();
    evidence_ss();
    return 0;
}
===== Makefile =====

evidence: matrix.c ss.c hw6_evidence.c
	gcc -Wall -o hw6_evidence ss.c hw6_evidence.c matrix.c htbl.c sll.c
clean:
	rm *~ *dSYM


/* ====== evaluation ====== */

/* === correctness === */

/* problem 1 (ss_read)                 4/ 4 */
/* problem 1 (ss_write)                2/ 4 */
/* problem 1 (squeeze)                 1/ 4 */
/* problem 1 (unsqueeze)               1/ 3 */

/* problem 2 (ht_resize)               7/ 8 */

/* problem 3 (matrix_zero)             1/ 2 */
/* problem 3 (matrix_read)             2/ 2 */
/* problem 3 (matrix_write)            2/ 2 */
/* problem 3 (matrix_add)              3/ 3 */
/* problem 3 (matrix_mult)             5/ 5 */
/* problem 3 (matrix_show)             3/ 3 */
/* problem 3 (matrix_free)             2/ 2 */

/* === style === */

/* code layout                         6/ 6 */
/* identifiers are well named          6/ 6 */
/* well-written purposes               4/ 4 */
/* prototypes with appropriate types   4/ 4 */

/* functions are well designed         6/ 6 */
/* code is well factored               6/ 6 */

/* code is written clearly             8/ 8 */
/* code is efficient                   6/ 6 */

/* adequate tests                      8/ 8 */
/* svn used correctly                  4/ 4 */

/* _total-score_                      91/100 */

/* graded by Alice Zhang */
