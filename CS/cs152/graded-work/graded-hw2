===== hw2.h =====

/* Min Su Kim, mskim3494 */
/* CS152, Winter 2015 */
/* Homework 2 */

/* sum_cubes : [unsigned int] -> [unsigned int] */
/* sum the cubes of the first n numbers */
unsigned int sumcubes (unsigned int n);

/* betweenrungs : [unsigned int] [unsigned int] [unsigned int] -> [void] */
/* draws part of the ladder (between the rungs) */
void betweenrungs (unsigned int rung, unsigned int width, unsigned int between);

/* ladder : [unsigned int] [unsigned int] [unsigned int] -> [void] */
/* print out a ladder */
void ladder (unsigned int rungs, unsigned int width, unsigned int between);

/* step : [unsigned int] [unsigned int] 
 [unsigned int] [unsigned int] -> [void] */
/* draws one step */
void step (unsigned int step, unsigned int depth,
           unsigned int riser, unsigned int counter);

/* stairs : [unsigned int] [unsigned int] [unsigned int] -> [void] */
/* prints out stairs */
void stairs (unsigned int stairs, unsigned int depth, unsigned int riser);

/* expt : [int] [unsigned int] -> [int] */
/* exponentiates a by n */
int expt (int a, unsigned int n);

/* basetoint : [int] [int*] [int] -> [int] */
/* converts a sequence of numbers expressed 
 in a given base into an int value */
int base_to_int (int ndigits, int* digits, int base);


===== hw2.c =====

/* Min Su Kim, mskim3494 */
/* CS152, Winter 2015 */
/* Homework 2 */

#include <stdio.h>
#include <stdlib.h>
#include "hw2.h"

/* PROBLEM 1*/
/* adds the first n cubes */
unsigned int sumcubes( unsigned int n)
{
    unsigned int i=n;
    unsigned int acc=0;
    for (i=n; i>0; i--){
        acc += (i * i * i);
    }
    return acc;
}

/* PROBLEM 2 */

/* helper function for ladder */
/* draws part of the ladder (beteen the rungs) */
void betweenrungs (unsigned int rung, unsigned int width, unsigned int between)
{
    unsigned int b= between;
    unsigned int w= width;
    if (rung == 1){ /* if rung, print asterisks*/
        printf("*");
        for (w=width; w>0; w--){
            printf("*");
        } printf("*\n");
    } else if (rung == 0){ /*if not a rung, print spaces */
        for (b=between; b>0; b--){
            printf("*");
            for (w= width; w>0; w--){
                printf(" ");
            } printf("*\n");
        }
    }
}

void ladder (unsigned int rungs, unsigned int width, unsigned int between)
{
    unsigned int i=rungs;
    if (width <= 0 | between <= 0){
    /* #grader: "|" and "||" are not the same operator. Here, you want "||". */
    /* In this case, it happens to not make a difference, but it could in other */
    /* cases, so watch out */
        fprintf(stderr, "Negative width or between\n");
        exit(1);
    } else if (rungs <= 0) {
        printf("\n"); /* #grader: newline is not the same as no picture */
    } else {
        for(i=rungs; i>0; i--){
            betweenrungs(0, width, between);
            betweenrungs(1, width, between);
        } betweenrungs (0, width, between);
    }
}

/* PROBLEM 3 */

/* helper function for stairs */
/* draws one step*/
void step (unsigned int steps, unsigned int depth,
           unsigned int riser, unsigned int counter)
{
    unsigned int i=0;
    unsigned int upto= steps*depth;
    unsigned int r=0;
    
    for (r=0; r<riser; r++){
        for (i=0; i<upto; i++){
            printf("*");
        } i= upto;
        for (i=upto; i<counter; i++){
            printf(".");
        }printf("\n");
    }
}

void stairs (unsigned int steps, unsigned int depth, unsigned int riser)
{
    unsigned int i= 0;
    unsigned int c= steps*depth;
    if (depth <= 0 | riser <= 0){
        fprintf(stderr, "Non-positive depth or riser\n");
        exit(1);
    } else if (steps <= 0){
        printf("\n");
    } else {
        for (i=0; i<steps; i++){
            step(i, depth, riser, c);
        }
    }
}

/* PROBLEM 4 */

/* helper function for base_to_int*/
/* exponentiates a by n */
int expt (int a, unsigned int n)
{
    int i=n;
    int acc=1;
    if (n==0){
        return 1;
    } else {
        for (i=n; i>0; i--){
            acc *= a;
        } return acc;
    }
}

int base_to_int(int ndigits, int* digits, int base)
{
    int i= ndigits;
    int acc=0;
    for(i= ndigits; i>0; i--){
        acc += (digits[i-1]*(expt (base, (i-1))));
    } return acc;
}

/* #grader */
/* Make sure to account for the case where digits >= base  (error) */
/* Also, check out the built in function "pow" */


===== hw2_evidence.c =====

/* Min Su Kim, mskim3494 */
/* CS152, Winter 2015 */
/* Homework 2 */

#include <stdio.h>
#include <stdlib.h>
#include "hw2.h"

void evidence_sumcubes()
{
    printf(" ---- testing sumcubes ---\n");
    printf("n = %d, %d, %d\n", 4, 100, (sumcubes(4)));
    printf("n = %d, %d, %d\n", 2, 9, (sumcubes(2)));
    printf("n = %d, %d, %d\n", 3, 36, (sumcubes(3)));
    printf("n = %d, %d, %d\n", 0, 0, (sumcubes(0)));
}

void evidence_betweenrungs()
{
    printf(" --- testing betweenrungs ---\n");
    printf("eyeball test betweenrungs(1,3,2)\n");
    betweenrungs(1,3,2);
    printf("eyeball test betweenrungs(0,2,3)\n");
    betweenrungs(0,2,3);
}

void evidence_ladder()
{
    printf(" --- testing ladder ---\n");
    printf("eyeball test ladder(5,3,2)\n");
    ladder(5,3,2);
    printf("eyeball test ladder (0,3,2)\n");
    ladder(0,3,2);
    printf("eyeball test ladder(3,3,1)\n");
    ladder(3,3,1);
}

void evidence_step()
{
    printf(" --- testing step ---\n");
    printf("eyeball test step(4,1,1,4)\n");
    step(4,1,1,4);
    printf("eyeball test step(3,3,2,15)\n");
    step(3,3,2,15);
}

void evidence_stairs()
{
    printf(" --- testing stairs ---\n");
    printf("eyeball test stairs(5,3,2)\n");
    stairs(5,3,2);
    printf("eyeball test stairs(3,2,1)\n");
    stairs(3,2,1);
    printf("eyeball test stairs(3,2,1)\n");
    stairs(0,1,1);
    printf("eyeball test stairs(4,1,1)\n");
    stairs(4,1,1);
}

void evidence_expt()
{
    printf(" --- testing expt ---\n");
    printf("- expecting 1: %d\n", expt(2,0));
    printf("- expecting -8: %d\n", expt(-2,3));
    printf("- expecting 27: %d\n", expt(3,3));
    printf("- expecting 128: %d\n", expt(2,7));
}

void evidence_base_to_int()
{
    int digits[] = {2,3,4,5};
    int digits1[] = {5, 6, 7};
    int digits2[] = {7, 6, 5};
    int digits3[] = {-1, -2, -3};
    int digits4[] = {1, 2, 3};
    printf(" --- testing base_to_int ---\n");
    printf("expecting 5432, %d\n", (base_to_int(4, digits, 10)));
    printf("expecting 501, %d\n", (base_to_int(3, digits1, 8)));
    printf("expecting 375, %d\n", (base_to_int(3, digits2, 8)));
    printf("expecting -321, %d\n", (base_to_int(3, digits3, 10)));
    printf("expecting 321, %d\n", (base_to_int(3, digits4, 10)));
}

int main (int argc, char *argv[])
{
    evidence_sumcubes();
    evidence_betweenrungs();
    evidence_ladder();
    evidence_step();
    evidence_stairs();
    evidence_expt();
    evidence_base_to_int();
    return 0;
}
===== sumcubes.c =====

/* Min Su Kim, mskim3494 */
/* CS152, Winter 2015 */
/* Homework 2 */

#include <stdio.h>
#include <stdlib.h>
#include "hw2.h"

int main(int argc, char *argv[])
{
    unsigned int a = atoi(argv[1]);
    printf("%d\n", sumcubes(a));
    return 0;
}
===== ladder.c =====

/* Min Su Kim, mskim3494 */
/* CS152, Winter 2015 */
/* Homework 2 */

#include <stdio.h>
#include <stdlib.h>
#include "hw2.h"

int main(int argc, char *argv[])
{
    unsigned int a = atoi(argv[1]);
    unsigned int b = atoi(argv[2]);
    unsigned int c = atoi(argv[3]);
    ladder(a,b,c);
    return 0;
}
===== stairs.c =====

/* Min Su Kim, mskim3494 */
/* CS152, Winter 2015 */
/* Homework 2 */

#include <stdio.h>
#include <stdlib.h>
#include "hw2.h"

int main(int argc, char *argv[])
{
    unsigned int a = atoi(argv[1]);
    unsigned int b = atoi(argv[2]);
    unsigned int c = atoi(argv[3]);
    stairs(a,b,c);
    return 0;
}
===== basetodecimal.c =====

/* Min Su Kim, mskim3494 */
/* CS152, Winter 2015 */
/* Homework 2 */

#include <stdio.h>
#include <stdlib.h>
#include "hw2.h"

int main(int argc, char *argv[])
{
    int a = atoi(argv[1]);
    int b = atoi(argv[2]);
    int* digits=malloc(b * sizeof(int));
    int i=b;
    for(i=b; i>0; i--){
        scanf("%d", &digits[i-1]);
    } printf("%d\n", base_to_int(b,digits,a));
    return 0;
}
===== Makefile =====

evidence: hw2.c hw2_evidence.c
	gcc -Wall -o hw2_evidence hw2.c hw2_evidence.c

sumcubes: hw2.c sumcubes.c
	gcc -Wall -o sumcubes hw2.c sumcubes.c

ladder: hw2.c ladder.c
	gcc -Wall -o ladder hw2.c ladder.c

stairs: hw2.c stairs.c
	gcc -Wall -o stairs hw2.c stairs.c

basetodecimal: hw2.c basetodecimal.c
	gcc -Wall -o basetodecimal hw2.c basetodecimal.c



/* ====== evaluation ====== */

/* === correctness === */

/* problem 1 (sum_cubes)               6/ 6 */
/* problem 2 (ladder)                  9/10 */
/* problem 3 (stairs)                  9/10 */
/* problem 4 (base_to_int)             15/16 */

/* === style === */

/* code layout                         6/ 6 */
/* identifiers are well named          6/ 6 */
/* well-written purposes               4/ 4 */
/* prototypes with appropriate types   4/ 4 */

/* functions are well designed         5/ 6 */
/* code is well factored               6/ 6 */

/* code is written clearly             8/ 8 */
/* code is efficient                   6/ 6 */

/* adequate tests                      8/ 8 */
/* svn used correctly                  4/ 4 */

/* _total-score_                      96/100 */

/* graded by Alice Zhang */
