/* graded lab2 */

/* ====== Makefile ====== */
evidence: expt.c evidence_expt.c
	gcc -Wall -o evidence_expt expt.c evidence_expt.c
raise: expt.c raise.c
	gcc -Wall -o raise expt.c raise.c

/* ====== expt.h ====== */
/* expt : int [unsigned int] -> [long int] */
/* linear time recursive exponentiation */
long int expt (int a, unsigned int n);

/* ss : int [unsigned int] -> [long int] */
/* exponentiation by succesive squaring */
long int ss (int a, unsigned int n);

/* ssm : int [unsigned int] [unsigned int] -> int */
/* exponentiation modulo m by succesive squaring */
int ssm (int a, unsigned int n, unsigned int m);


/* ====== expt.c ====== */
#include "expt.h"

/* Min Su Kim, mskim3494 */
/* CMSC 152, Winter 2015 */
/* Lab 1 */

/* Exponentiation by Iteration */
/* compute integer to the nth power given natural n */
long int expt (int a, unsigned int n) {
    if (n == 0){
        return 1;
    }else {
        return a * expt(a, n-1);
    }
}


/* Fast Exponentiation */
/* compute integer to the nth power using successive squaring */
long int ss ( int a , unsigned int n){
  if(n == 0){
    return 1;
  }else if(n == 2){
      return a*a;
  }else if(n%2 == 0){
    return ss(ss(a, n/2), 2);
  } else {
    return a * ss(a, n-1);
  }
}

/* Exponentiation using modulo */
/* compute integer to the nth power using modulo */
int ssm(int a, unsigned int n, unsigned int m){
    if(n == 0){
        return 1;
    }else if(n == 2){
        return (a*a);
    }else if(n%2 == 0){
        return ssm(ssm(a, n/2, m), 2,m)%m;
    } else {
        return a * ssm(a, n-1, m)%m;
    }
}



/* ====== evidence_expt.c ====== */
/* Min Su Kim, mskim3494 */
/* CMSC 152, Winter 2015 */
/* Lab 1 */

#include <stdio.h>
#include "expt.h"

void evidence_expt()
{printf("*** testing expt\n");
  printf("- expecting 1: %ld\n", expt(2,0));
  printf("- expecting 8: %ld\n", expt(2,3));
  printf("- expecting 9: %ld\n", expt(3,2));
}

void evidence_ss()
{
  printf("*** testing ss\n");
  printf("- expecting 1: %ld\n", ss(10,0));
  printf("- expecting 16: %ld\n", ss(2,4));
  printf("- expecting 128: %ld\n", ss(2,7));
  printf("- expecting 32: %ld\n", ss(2,5));
  printf("- expecting 3: %ld\n", ss(3,1));
}

void evidence_ssm()
{
    printf("*** testing ssm\n");
    printf("- expecting 6: %d\n", ssm(2,4,10));
    printf("- expecting 24: %d\n", ssm(2,10,1000));
    printf("- expecting 4: %d\n", ssm(3,1000, 7));
}


int main (int argc, char *argv[])
{
  evidence_expt();
  evidence_ss();
  evidence_ssm();
  return 0;
}


/* ====== raise.c ====== */
/* Min Su Kim, mskim3494 */
/* CMSC 152, Winter 2015 */
/* Lab 1 */

#include <stdlib.h>
#include <stdio.h>
#include "expt.h"

int main(int argc, char *argv[])
{
    int a = atoi(argv[1]);          /* reads 1st command line argument */
    unsigned int n = atoi(argv[2]); /* reads 2nd command line argument */
    printf("%ld\n",ss(a,n));
    return 0;
}


/* ====== evaluation ======  */

/* === correctness === */

/* Makefile :                         5  / 5 */
/* expt.h   :                         5  / 5 */

/* expt.c   :                        13  /13 */
/* evidence_expt.c :                 13  /13 */
/* raise.c :                         12  /12 */

/* === style === */

/* code layout                        8  / 8 */
/* identifiers are well named         6  / 6 */

/* functions are well designed        6  / 6 */
/* code is well factored              6  / 6 */

/* code is written clearly            8  / 8 */
/* code is efficient                  5  / 6 */ #grader please avoid using recursive calls, it's better to use a loop

/* adequate tests                     8  / 8 */
/* svn used correctly                 4  / 4 */

/* _total-score_                     99 /100 */

/* graded by Zhixuan */
