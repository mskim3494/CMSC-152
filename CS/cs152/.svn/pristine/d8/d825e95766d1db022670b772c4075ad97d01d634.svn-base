/* Min Su Kim, mskim3494 */
/* CMSC 152, Winter 2015 */
/* HOMEWORK 5 */

#include <stdlib.h>
#include <stdio.h>
#include <math.h>
#include <string.h>

#include "ss.h"

unsigned char normalize (char c)
{
    if (c<91 && c>64){
        return c-64;
    } else if (c<123 && c>96){
        return c-96;
    } else if (c == 32) {
        return c-32;
    } else {
        return 28;
    }
}

char capitalize (char c)
{
    if (c<91 && c>64){
        return c;
    } else if (c<123 && c>96){
        return c-32;
    } else if (c == 32) {
        return c;
    } else {
        return 28;
    }
}

unsigned char* binary(unsigned char c)
{
    unsigned char* tmp= malloc(5*sizeof(unsigned char));
    if(tmp==NULL){
        fprintf(stderr, "malloc failed");
        exit(1);
    } else {
        int i;
        for(i=0; i<5;i++){
            if(c==0){
                tmp[4-i]=0;
            }else {
                tmp[4-i]=
                ((c%2)==1? 1 : 0);
                c= c/2;
            }
        }return tmp;
    }
}

void show_binary(unsigned char* s)
{
    int i;
    for(i=0;i<5;i++){
        printf("%d", s[i]);
    } printf("\n");
}

void ss_write(squeezed_string* ss, unsigned int i, char c)
{
    int bit_num,byte_num,j;
    unsigned char y,z;
    y=z=0;
    bit_num= (i==0? 0 : (5*i%8));
    byte_num= 5*i/8;
    if(i>ss->clen){
        fprintf(stderr,"index out of bounds\n");
        exit(1);
    } else {
        if(c==32||(c<='Z' && c>='A')){
            unsigned char *k=binary(normalize(c));
            for(j=0;j<5;j++){
                if(bit_num>7){
                    if(k[j]!=0){
                        z+=(unsigned char) pow(2,14-(bit_num++));
                    } bit_num++;
                } else if(k[j]!=0){
                    y+=(unsigned char) pow(2,7-(bit_num++));
                } else {
                    bit_num++;
                }
            } ss->array[byte_num]= ss->array[byte_num] | y;
            ss->array[byte_num+1]= ss->array[byte_num+1] | z;
            free(k);
        } else {
            fprintf(stderr,"invalid ASCII\n");
            exit(1);
        }
    }
}

squeezed_string* squeeze(char* s)
{
    squeezed_string* nss=malloc(sizeof(squeezed_string));
    int len= strlen(s);
    int i=0;
    float random=(5*len/8);
    int x= (random-(int)random)==0 ? (int)random : (int) random+1;
    int* k= &x;
    nss->clen= len;
    nss->alen= *k;
    int s_array= *k + (8-((*k)%8)); /*to make multiple of 8 */
    nss->array= malloc(s_array*sizeof(unsigned char));
    for(i=0;i<*k; i++){
        nss->array[i]=0;
    } for(i=0;i<len; i++){
        ss_write(nss, i, s[i]);
    }
    return nss;
}

void show_ss(squeezed_string *ss)
{
    int i;
    for(i=0;i<ss->alen;i++){
        printf("%d", ss->array[i]);
    } printf("\n %d\n",ss->alen);
}

char ss_read(squeezed_string* ss, unsigned int i)
{
    int bit_num,byte_num,j;
    unsigned char x,y,z;
    y=z=0;
    bit_num= (i==0? 0 : (5*i%8));
    byte_num= 5*i/8;
    if(i>ss->clen){
        fprintf(stderr,"index out of bounds\n");
        exit(1);
    } else {
        for(j=0;j<5;j++){
            if(bit_num>7){
                z+=(unsigned char) pow(2,14-(bit_num++));
            } else {
                y+=(unsigned char) pow(2, 7-(bit_num++));
            }
        } y= ss->array[byte_num] & y;
        z= ss->array[byte_num+1] & z;
        x=y+z;
        return (x==0? 32 : x+64);
    }
}


char* unsqueeze(squeezed_string* ss)
{
    char* unsqueezed= malloc(ss->clen* sizeof(char));
    int i,k;
    char j=0;
    k=0;
    for(i=0;i<ss->clen; i++){
        j=ss_read(ss,i);
        unsqueezed[k++]=j;
    } return unsqueezed;
}

void free_squeezed_string(squeezed_string* ss)
{
    free(ss->array);
    free(ss);
}