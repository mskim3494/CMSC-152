# Makefile for CS152 2015 Lab 4

.PHONY: clean

adrbook: adrbook.h bst.c vcard.c main.c
	gcc -g -o adrbook -Wall vcard.c bst.c main.c -lm

# type 'make clean' to remove the executable and debug information
clean:
	rm -rf adrbook *.dSYM

#include <stdlib.h>
#include <stdio.h>
#include <math.h>
#include "adrbook.h"

bst *bst_singleton(vcard *c)
{
    bst* tmp = malloc(sizeof(bst));
    tmp->c = c;
    tmp->lsub=NULL;
    tmp->rsub=NULL;
    return tmp;
}

int bst_insert(bst *t, vcard *c)
{
    int cmp = strcmp(t->c->cnet, c->cnet);
    if (t == NULL){
        fprintf(stderr, "empty tree");
        exit(1);
    } else if (cmp > 0){
        if (t->lsub == NULL){
            t->lsub = bst_singleton(c);
            return 1;
        } else {
            bst_insert(t->lsub, c);
        }
    } else if (cmp == 0) {
        return 0;
    } else if (cmp < 0) {
        if (t->rsub == NULL){
            t->rsub = bst_singleton(c);
            return 1;
        } else {
            bst_insert(t->rsub, c);
        }
    }
}

unsigned int bst_num_entries(bst *t)
{
    if (t == NULL){
        return 0;
    } else {
        return 1 + bst_num_entries (t->lsub)
        + bst_num_entries (t->rsub);
    }
}

unsigned int bst_height(bst *t)
{
    if (t == NULL){
        return 0;
    } else {
        return 1 + MAX(bst_height(t->lsub),
                       bst_height(t->rsub));
    }
}

vcard *bst_search(bst *t, char *cnet, int *n_comparisons)
{
    *n_comparisons=0;
    return searching(t, cnet, n_comparisons);
}

vcard *searching(bst *t, char *cnet, int *n_comparisons)
{
    if(t == NULL){
        return NULL;
    } int cmp = strcmp(t->c->cnet, cnet);
    *n_comparisons+=1;
    if (cmp > 0){
        if(t->lsub == NULL){
            return NULL;
        } else {
            searching(t->lsub, cnet, n_comparisons);
        }
    } else if (cmp == 0){
        return t->c;
    } else if (cmp < 0){
        if(t->rsub == NULL){
            return NULL;
        } else {
            searching(t->rsub, cnet, n_comparisons);
        }
    }
}

unsigned int bst_c(bst *t, char c)
{
    if (t == NULL){
        return 0;
    } else if (t->c->cnet[0] == c){
        printf("%s\n", t->c->cnet);
        return 1 + bst_c(t->lsub, c)
         + bst_c(t->rsub, c);
    } else if (t->lsub == NULL){
        return bst_c(t->rsub, c);
    } else if (t->rsub == NULL){
        return bst_c(t->lsub, c);
    } else {
        return bst_c(t->lsub,c) + bst_c(t->rsub,c);
    }
}

void bst_free(bst *t)
{
    
}
#include <stdlib.h>
#include <stdio.h>
#include "adrbook.h"

vcard *vcard_new(char *cnet, char *email, char *fname, char *lname, char *tel)
{
    vcard* tmp = malloc(sizeof(vcard));
    tmp->cnet= strdup(cnet);
    tmp->email= strdup(email);
    tmp->fname= strdup(fname);
    tmp->lname= strdup(lname);
    tmp->tel= strdup(tel);
    return tmp;
}

void vcard_free(vcard *c)
{
    free(c->cnet);
    free(c->email);
    free(c->fname);
    free(c->lname);
    free(c->tel);
    free(c);
}

void vcard_show(vcard *c)
{
    printf("CNET: %s\n", c->cnet);
    printf("email: %s\n", c->email);
    printf("fname: %s\n", c->fname);
    printf("lname: %s\n", c->lname);
    printf("tel: %s\n", c->tel);
}

/* ====== evaluation ======  */

/* --- vcards --- */
/* - vcard_new           / 6 */
/* - vcard_show          / 4 */
/* - vcard_free          / 3 */

/* --- bsts --- */
/* - bst_singleton       / 4 */
/* - bst_insert          / 6 */
/* - bst_num_entries     / 4 */
/* - bst_height          / 4 */
/* - bst_search          / 6 */
/* - bst_c               / 6 */
/* - bst_free            / 3 */

/* Makefile              / 4 */

/* === style === */

/* code layout                         / 8 */
/* identifiers are well named          / 8 */

/* functions are well designed         / 8 */
/* code is well factored               / 8 */

/* code is written clearly             / 8 */
/* code is efficient                   / 8 */

/* svn used correctly                  / 2 */

/* _total-score_                      100/100 */

/* graded by Nikita Mishra */
