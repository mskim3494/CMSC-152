#include <stdlib.h>
#include <stdio.h>
#include <math.h>
#include "adrbook.h"

bst *bst_singleton(vcard *c)
{
    bst* tmp = malloc(sizeof(bst));
    tmp->c = c;
    tmp->lsub=NULL;
    tmp->rsub=NULL;
    return tmp;
}

int bst_insert(bst *t, vcard *c)
{
    int cmp = strcmp(t->c->cnet, c->cnet);
    if (t == NULL){
        fprintf(stderr, "empty tree");
        exit(1);
    } else if (cmp > 0){
        if (t->lsub == NULL){
            t->lsub = bst_singleton(c);
            return 1;
        } else {
            bst_insert(t->lsub, c);
        }
    } else if (cmp == 0) {
        return 0;
    } else if (cmp < 0) {
        if (t->rsub == NULL){
            t->rsub = bst_singleton(c);
            return 1;
        } else {
            bst_insert(t->rsub, c);
        }
    }
}

unsigned int bst_num_entries(bst *t)
{
    if (t == NULL){
        return 0;
    } else {
        return 1 + bst_num_entries (t->lsub)
        + bst_num_entries (t->rsub);
    }
}

unsigned int bst_height(bst *t)
{
    if (t == NULL){
        return 0;
    } else {
        return 1 + MAX(bst_height(t->lsub),
                       bst_height(t->rsub));
    }
}

vcard *bst_search(bst *t, char *cnet, int *n_comparisons)
{
    *n_comparisons=0;
    return searching(t, cnet, n_comparisons);
}

vcard *searching(bst *t, char *cnet, int *n_comparisons)
{
    int cmp = strcmp(t->c->cnet, cnet);
    *n_comparisons+=1;
    if (cmp > 0){
        if(t->lsub == NULL){
            return NULL;
        } else {
            searching(t->lsub, cnet, n_comparisons);
        }
    } else if (cmp == 0){
        return t->c;
    } else if (cmp < 0){
        if(t->rsub == NULL){
            return NULL;
        } else {
            searching(t->rsub, cnet, n_comparisons);
        }
    }
}

unsigned int bst_c(bst *t, char c)
{
    if (t == NULL){
        return 0;
    } else if (t->c->cnet[0] == c){
        printf("%s\n", t->c->cnet);
        return 1 + bst_c(t->lsub, c)
         + bst_c(t->rsub, c);
    } else if (t->lsub == NULL){
        return bst_c(t->rsub, c);
    } else if (t->rsub == NULL){
        return bst_c(t->lsub, c);
    }
}

void bst_free(bst *t)
{
    
}
