/* Min Su Kim, mskim3494 */
/* CMSC 152, Winter 2015 */
/* HOMEWORK 5 */

#include <stdlib.h>
#include <stdio.h>
#include <math.h>
#include <string.h>

#include "ss.h"

unsigned char normalize (char c)
{
    if (c<91 && c>64){
        return c-64;
    } else if (c<123 && c>96){
        return c-96;
    } else if (c == 32) {
        return c-32;
    } else {
        return 28;
    }
}

char capitalize (char c)
{
    if (c<91 && c>64){
        return c;
    } else if (c<123 && c>96){
        return c-32;
    } else if (c == 32) {
        return c;
    } else {
        return 28;
    }
}

unsigned char* squeezed(unsigned char c)
{
    unsigned char* tmp= malloc(5*sizeof(unsigned char));
    if(tmp==NULL){
        fprintf(stderr, "malloc failed");
        exit(1);
    } else {
        int i;
        for(i=0; i<5;i++){
            if(c==0){
                tmp[4-i]=0;
            }else {
                tmp[4-i]=
                ((c%2)==1? 1 : 0);
                c= c/2;
            }
        }return tmp;
    }
}

void ss_write(squeezed_string* ss, unsigned int i, char c)
{
    int counter=0;
    if(i>ss->alen){
        fprintf(stderr,"index out of bounds\n");
        exit(1);
    } else {
        if(c==32||(c<='Z' && c>='A')){
            unsigned char* n=squeezed(normalize(c));
            for(counter=0;counter<5;counter++){
                ss->array[i++]= n[counter];
            }
        } else {
            fprintf(stderr,"invalid ASCII\n");
            exit(1);
        }
    }
}

squeezed_string* squeeze(char* s)
{
    squeezed_string* nss=malloc(sizeof(squeezed_string));
    int len= strlen(s);
    int i=0;
    int j=0;
    int x= 5*len;
    int* k= &x;
    char c;
    nss->clen= len;
    nss->alen= *k;
    int s_array= *k + (8-((*k)%8)); /*to make multiple of 8 */
    nss->array= malloc(s_array*sizeof(unsigned char));
    for(i=0;i<(*k);i+=5){
        c=capitalize(s[j]);
        if(c==28){
            j++;
            i-=5;
            *k-=5;
        } else {
            ss_write(nss,i,c);
            j++;
        }
    }
    return nss;
}

char ss_read(squeezed_string* ss, unsigned int i)
{
    char acc=0;
    int counter=4;
    if(i>ss->alen){
        fprintf(stderr,"index out of bounds\n");
        exit(1);
    } else {
        int j;
        for(j=i;j<i+5;j++){
            if(ss->array[j]==1){
                acc+=pow(2,counter--);
            } else {
                counter--;
            }
        } if(acc>26){
            fprintf(stderr,"invalid output\n");
            exit(1);
        } else {
            if(acc==0){
                return ' ';
            }else{
                return acc+64;
            }
        }
    }
}

char* unsqueeze(squeezed_string* ss)
{
    char* unsqueezed= malloc(ss->clen* sizeof(char));
    int i,k;
    char j=0;
    k=0;
    for(i=0;i<ss->alen; i+=5){
        j=ss_read(ss,i);
        unsqueezed[k++]=j;
    } return unsqueezed;
}

void free_squeezed_string(squeezed_string* ss)
{
    free(ss->array);
    free(ss);
}


