===== string_list.c =====

/* Min Su Kim, mskim3494 */
/* CMSC 152, Winter 2015 */
/* HOMEWORK 5 */

#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>
#include "string_list.h"

/* LINKED LISTS */

int sl_sorted_asc(string_list *ss)
{
    if(ss->next == NULL){
        return 1;
    }
    int cmp= strcmp(ss->val,ss->next->val);
    if (cmp <= 0){
        return sl_sorted_asc(ss->next);
    } else {
        return 0;
    }
}

string_list *new_sl(char *s, string_list *ss)
{
    string_list* tmp = malloc(sizeof(string_list));
    tmp->val=s;
    tmp->next=ss;
    return tmp;
}

void insert(char *s, string_list *ss)
{
    string_list* following = ss->next;
    int cmp=strcmp(s, ss->val);
    if(cmp < 0){
        sl_insert(s, following);
    } else if (cmp > 0){
        string_list* tmp = new_sl(s, following);
        ss->next= tmp;
    }
}

string_list *sl_insert(char *s, string_list *ss)
{
    insert(s,ss);
    return ss;
}

void destructive_filter (int(*test)(char*), string_list *prev, string_list *ss)
{
    if(ss->next == NULL){
        if((*test)(ss->val)==0){
            prev->next=NULL;
            free(ss->next);
            free(ss);
        } else {
            return;
        }
    } else if((*test)(ss->val)!=0){
        destructive_filter((*test), ss, ss->next);
    } else {
        prev->next= ss->next;
        free(ss);
        destructive_filter((*test), prev, ss->next);
    }
}

string_list *sl_filter(int(*test)(char*), string_list *ss)
{
    if (ss->next==NULL){
        if((*test)(ss->val)==0){
            return NULL;
        } else {
            return ss;
        }
    } else if ((*test)(ss->val)==0){
        destructive_filter((*test),ss, ss->next);
        return ss->next;
        free(ss);
    } else {
        destructive_filter((*test),ss,ss->next);
        return ss;
    }
}

int sample_test(char* s)
{
    if (s[0]=='b'){
        return 1;
    } else {
        return 0;
    }
}

void sl_free(string_list* ss)
{
    if(ss->next==NULL){
        free(ss);
        return;
    } else {
        sl_free(ss->next);
        free(ss);
    }
}















===== string_list.h =====

/* Min Su Kim, mskim3494 */
/* CMSC 152, Winter 2015 */
/* HOMEWORK 5 */

#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

/* LINKED LISTS */

typedef struct string_list string_list;
struct string_list {
    char *val;
    string_list *next;
};

/* sl_sorted_asc : [string_list*] -> [int] */
/* determines whether the list is in lexicographic order */
int sl_sorted_asc(string_list *ss);

/* new_sl : [char*] [string_list*] -> [string_list*] */
/* creates a new link */
string_list *new_sl(char *s, string_list *ss);

/* insert : [char*] [string_list*] -> [void] */
/* inserts the string in the proper place in the list */
void insert(char *s, string_list *ss);

/* sl_insert : [char*] [string_list *] -> [string_list*] */
/* inserts the string in the proper place in the list and returns
 * the pointer to the first entry */
string_list *sl_insert(char *s, string_list *ss);

/* destructive_filter : [int(*test)(char*)] [string_list*] [string_list*] -> [void] */
/* destructively filters the list based on the test */
void destructive_filter (int(*test)(char*), string_list *prev, string_list *ss);

/* sl_filter : [int(*test)(char*)] [string_list*] -> [string_list*] */
/* filters the list according to the predicate function
 * and returns the new head value */
string_list *sl_filter(int(*test)(char*), string_list *ss);

/* sample_test : [char*] -> [int] */
/* returns true for strings starting with 'b', false otherwise */
int sample_test(char* s);

/* sl_free : [string_list*] -> [void] */
/* frees a string list */
void sl_free(string_list* ss);
===== sl_evidence.c =====

/* Min Su Kim, mskim3494 */
/* CMSC 152, Winter 2015 */
/* HOMEWORK 5 */

#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>
#include "string_list.h"

/* LINKED LISTS */

void evidence()
{
    printf(" === testing sl_sorted_asc ===\n");
    string_list* sl4= new_sl("waaaa",NULL);
    string_list* sl3= new_sl("sparta!",sl4);
    string_list* sl2= new_sl("is",sl3);
    string_list* sl1= new_sl("this",sl2);
    printf("expecting 0, %d\n",sl_sorted_asc(sl1));
    string_list* sorted3= new_sl("carlos",NULL);
    string_list* sorted2= new_sl("beto",sorted3);
    string_list* sorted1= new_sl("abel",sorted2);
    printf("expecting 1, %d\n",sl_sorted_asc(sorted1));

    printf(" === testing sl_insert ===\n");
    string_list* test= sl_insert("alberto", sorted1);
    printf("expecting alberto, %s\n", test->next->val);
    printf("expecting alberto, %s\n", sorted1->next->val);
    printf("expecting beto, %s\n", test->next->next->val);
    
    printf(" === testing sl_filter ===\n");
    string_list* insert_berta= sl_insert("berta", test);
    int(*fptr)(char*);
    fptr=&sample_test;
    string_list* filter_test= sl_filter(fptr, insert_berta);
    printf("expecting berta, %s\n", filter_test->val);
    printf("expecting beto, %s\n", filter_test->next->val);
    sl_free(sl1);
    sl_free(filter_test);
}

int main()
{
    evidence();
    return 0;
}
===== huff.c =====

/* Min Su Kim, mskim3494 */
/* CMSC 152, Winter 2015 */
/* HOMEWORK 5 */

#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <string.h>
#include "huff.h"

/* HUFFMAN CODE */

char normalize (char c)
{
    if (c<91 && c>64){
        return c-64;
    } else if (c<123 && c>96){
        return c-96;
    } else if (c == 32) {
        return c-32;
    } else {
        return 28;
    }
}

int* count_letters(char* c)
{
    int l= strlen(c);
    int i;
    int* tmp=malloc(28*sizeof(int));
    for(i=0; i<29; i++){
        tmp[i]=0;
    } for(i=0; i<l; i++){
        tmp[(int)normalize(c[i])]+= 1;
    } return tmp;
}

huff *huff_singleton(char c, int n)
{
    huff* tmp= malloc(sizeof(huff));
    leaf leaflet;
    leaflet.c=c;
    leaflet.n=n;
    tmp->tag=LEAF;
    tmp->h.leaf=leaflet;
    return tmp;
}

int huff_weight(huff *h)
{
    switch(h->tag){
        case LEAF :
            return h->h.leaf.n;
            break;
        case NODE :
            return h->h.node.n;
            break;
        default :
            fprintf(stderr, "wrong tag, not hufftree");
            exit(1);
    }
}

huff_list* new_hufflist(huff* h, huff_list* list)
{
    huff_list* tmp= malloc(sizeof(huff_list));
    tmp->h=h;
    tmp->next=list;
    return tmp;
}

huff_list* huff_insert(huff_list* list, huff* h)
{
    if(list->next == NULL){
        if(list->h->tag != LEAF){
            fprintf(stderr, "not leaf!");
            exit(1);
        } else {
            if (huff_weight(h) < huff_weight(list->h)){
                huff_list* tmp= new_hufflist(h, list);
                return tmp;
            } else {
                huff_list* tmp= new_hufflist(h,NULL);
                list->next=tmp;
                return list;
            }
        }
    } else {
        ins_middle(list, list->next, new_hufflist(h,NULL));
        return list;
    }
}

void ins_middle(huff_list* prev, huff_list* rest, huff_list* h)
{
    if(rest->next==NULL){
        if (huff_weight(h->h) < huff_weight(rest->h)){
            prev->next= h;
            h->next=rest;
        } else {
            rest->next=h;
        }
    } else if(huff_weight(h->h) >= huff_weight(rest->h)){
        ins_middle(rest, rest->next, h);
    } else if (huff_weight(h->h) < huff_weight(rest->h)){
        prev->next= h;
        h->next=rest;
    }
}

huff_list* singleton_lst(int* arr)
{
    int i;
    huff_list* new=malloc(sizeof(huff_list));
    new->next=NULL;
    new->h= huff_singleton('i',0);
    for(i=1;i<28;i++){
        if(arr[i] != 0){
            new=huff_insert(new, huff_singleton(i+64,arr[i]));
        }
    } if (arr[0]!=0){
        new=huff_insert(new,huff_singleton(32,arr[0]));
    } return new->next;
}

huff *huff_merge(huff *h1, huff *h2)
{
    huff* nhuff= malloc(sizeof(huff));
    int w1= huff_weight(h1);
    int w2= huff_weight(h2);
    nhuff->tag= NODE;
    if(w1<w2){
        nhuff->h.node.lsub=h1;
        nhuff->h.node.rsub=h2;
    } else {
        nhuff->h.node.rsub=h1;
        nhuff->h.node.lsub=h2;
    } nhuff->h.node.n= huff_weight(h1)+huff_weight(h2);
    return nhuff;
}

huff* final_huff(huff_list* list)
{
    if (list->next == NULL){
        return list->h;
    } else if (list->next->next == NULL){
        return huff_merge(list->h, list->next->h);
    } else {
        return final_huff(new_hufflist(
                    huff_merge(list->h, list->next->h), list->next->next));
    }
}

void huff_lst_free(huff_list* h)
{
    if(h->next == NULL){
        free(h);
    } else {
        huff_lst_free(h->next);
        free(h);
    }
}

void free_huff (huff* h)
{
    switch(h->tag){
        case LEAF :
            free(h);
            break;
        case NODE :
            free_huff(h->h.node.lsub);
            free_huff(h->h.node.rsub);
            free(h);
        default :
            return;
    }
}

huff* huffman_code(char* s)
{
    int* occurences= count_letters(s);
    huff_list* singletons= singleton_lst(occurences);
    return final_huff(singletons);
}

void huff_show(huff *h)
{
    if(h->tag == 0){
        printf("| %c %d | ", h->h.leaf.c, h->h.leaf.n);
    } else if(h->tag == 1){
        printf(" %d \n", h->h.node.n);
        huff_show(h->h.node.lsub);
        huff_show(h->h.node.rsub);
        printf("\n");
    }
}





















===== huff.h =====

/* Min Su Kim, mskim3494 */
/* CMSC 152, Winter 2015 */
/* HOMEWORK 5 */

#ifndef HUFF_H
#define HUFF_H

typedef struct leaf leaf;
typedef struct node node;
typedef struct huff huff;

enum huff_tag { LEAF, NODE };

struct leaf {
    char c;
    int n;
};

struct node {
    int n;
    huff *lsub;
    huff *rsub;
};

union huff_union {
    leaf leaf;
    node node;
};

struct huff {
    enum huff_tag tag;
    union huff_union h;
};

typedef struct huff_list huff_list;
struct huff_list {
    huff* h;
    huff_list* next;
};

/* normalize : [char] -> [char] */
/* normalizes the characters for easy identification */
char normalize (char c);

/* count_letters : [char*] -> [int*] */
/* counts the number of occurences and places them into an
 * array that works as a histogram, space corresponding to 0,
 * A to 1, and so on such that Z = 27, and unsusables go in 29 */
int* count_letters(char* c);

/* Construct a singleton Huffman tree from a character and a count. */
huff *huff_singleton(char c, int n);

/* new_hufflist : [huff*] [huff_list*] -> [huff_list*] */
/* creates a new hufflist that can take another huff_list as input
 * if want a completely new one, list=NULL */
huff_list* new_hufflist(huff* h, huff_list* list);

/* huff_weight : [huff*] -> [int] */
/* Return the weight of a Huffman tree. */
int huff_weight(huff *h);

/* huff_insert : [huff_list*] [huff*] -> [huff_list*] */
/* inserts the huff into the list */
huff_list* huff_insert(huff_list* list, huff* h);

/* ins_middle : [huff_list*] [huff_list*] [huff_list*] -> [void] */
/* helper function for huff_insert */
void ins_middle(huff_list* prev, huff_list* rest, huff_list* h);

/* singleton_lst : [int*] -> [huff_list*] */
/* creates a sorted huff_list from an array with number of occrences */
huff_list* singleton_lst(int* arr);

/* final_huff : [huff_list*] -> [huff*] */
/* merges the huff in the huff_list into a single huff */
huff* final_huff(huff_list* list);

/* huff_merge : [huff*] [huff*] -> [huff*] */
/* Merge two Huffman trees. */
/* See step 2 of the algorithm on the web page for details. */
huff *huff_merge(huff *h1, huff *h2);

/* huffman_code : [char*] -> [huff*] */
/* uses all of the above to create a final huff using the huffman code */
huff* huffman_code(char* s);

/* huff_show : [huff*] -> [void] */
/* Display a Huffman tree at the console. */
/* Essential for development and debugging. */
void huff_show(huff *h);

/* huff_lst_free : [huff_list*] -> [void] */
/* frees a huffman list */
void huff_lst_free(huff_list* h);

/* free_huff : [huff*] -> [void] */
/* frees a huffman tree */
void free_huff (huff* h);

/* finds the number of leaves in the tree */
int huff_leaves(huff* h)

#endif /* HUFF_H */





===== Makefile =====

evidence: string_list.c sl_evidence.c
	gcc -Wall -o sl_evidence sl_evidence.c string_list.c
huff: huff.h huff.c
	gcc -Wall -o huff_evidence huff_evidence.c huff.c
clean:
	rm *~ sl_evidence huffman

/* ====== evaluation ====== */

/* === correctness === */

/* problem 1 (sl_sorted_asc)           4/ 4 */
/* problem 1 (sl_insert)               4/ 4 */
/* problem 1 (sl_filter)               4/ 4 */

/* problem 2 (frequency analysis)      3/ 3 */
/* problem 2 (make singletons)         2/ 2 */
/* problem 2 (weight calculation)      3/ 3 */
/* problem 2 (merge function)          3/ 3 */
/* problem 2 (construction process)    8/ 8 */
/* problem 2 (encoding of string)      0/ 8 */
/* problem 2 (freeing of structures)   0/ 3 */

/* === style === */

/* code layout                         6/ 6 */
/* identifiers are well named          6/ 6 */
/* well-written purposes               4/ 4 */
/* prototypes with appropriate types   4/ 4 */

/* functions are well designed         6/ 6 */
/* code is well factored               6/ 6 */

/* code is written clearly             8/ 8 */
/* code is efficient                   6/ 6 */

/* adequate tests                      8/ 8 */
/* svn used correctly                  4/ 4 */

/* _total-score_                      89/100 */

/* graded by Benjamin Rohrer */