/* Min Su Kim, mskim3494 */
/* CMSC 152, Winter 2015 */
/* Homework 3 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include "hw3.h"

/* PROBLEM 1 */

/* sum function */
/* sums the values and returns the sum */
int sum(int* a, int alen)
{
    int acc=0;
    int i=0;
    for(i=0; i<alen; i++){
        acc += a[i];
    } return acc;
}

/* squares function */
/* squares each of the elements of the array */
void squares(int* a, int alen)
{
    int i=0;
    for(i=0; i<alen; i++){
        a[i]= (a[i] * a[i]);
    } printf("{"); /* this part done for checking purposes */
    for (i=0; i<alen; i++){
        if(i==(alen-1)){
        printf("%d", a[i]);
        } else {
        printf("%d,", a[i]);
        }
    }printf("}\n");
}

/* positives function */
/* filters out non-positive values */
void positives(int* a, int* alen)
{
    int i=0;
    int j=0;
    int k= *alen;
    for(i=0; i<*alen; i++){
        if (a[i] <= 0){
            k--;
        }
    }
    for(i=0; i<*alen; i++){
        if (a[i] > 0){
            a[j++]=a[i];
        }
    } *alen=k;
    printf("{"); /* this part done for checking purposes */
    for (i=0; i<*alen; i++){
        if(i==(*alen-1)){
            printf("%d", a[(*alen-1)-i]);
        } else {
            printf("%d,", a[(*alen-1)-i]);
        }
    }printf("}\n");
}

/* millionaire function */
/* adds up assets and returns true if at least a million */
int millionaire(int* a, int alen)
{
    int acc=0;
    int i=0;
    for (i=0; i<alen; i++){
        if ((acc + a[i])>=1000000){
            return 1;
            break;
        } else {
            acc += a[i];
        }
    } return 0;
}


/* PROBLEM 2 */

/* takes character in ASCII code and returns int equivalent */
/* actual function name ASCII_to_int, but shortened
 * for easier use in str_to_int */
int ati (char ch)
{
    if (47 < ch && ch < 58){
        return ch-48;
    } else if ((64 < ch && ch < 71) || ch==88){
        return ch-55;
    } else if ((96 < ch && ch < 103) || ch==120){
        return ch-87;
    } else if (ch == 45){
        return ch;
    }else {
        fprintf(stderr,"invalid number%c\n", ch);
    }
}

/* takes a non-decimal and turns into int */
int random_to_int(char* str, int base)
{
    int i;
    int length= strlen(str)-1;
    int acc=0;
    if (base == 16){
        for (i=length; i>1; i--){
            acc+= (ati(str[i]) * pow(base,(length-i)));
        } return acc;
    } else if (base == 8){
        for (i=length; i>0; i--){
            acc+= (ati(str[i]) * pow(base,(length-i)));
        } return acc;
    } else if (base == 10){
        if (ati(str[0])==45){
            for (i=1; i<length+1; i++){
                acc+= (ati(str[i]) * pow(base,length-i));
            } return -acc;
        } else {
            for (i=0; i<length+1; i++){
                acc+= (ati(str[i]) * pow(base,length-i));
            } return acc;
        }
    } return 5;
}

/* takes a string in this form and returns its value represented as an int*/
int str_to_int(char* str)
{
    int l= strlen(str);
    if(str[0]=='0') {
        if (str[1]=='x'||str[1]=='X'){
            if (l<=2){
                fprintf (stderr,"error, wrong input; ");
            } else {
                return random_to_int(str, 16);
            }
        } else {
            return random_to_int(str, 8);
        }
    } else if (ati(str[0])<10|| str[0]=='-') {
        return random_to_int(str,10);
    } else {
        fprintf(stderr, "wrong input, cannot convert; ");
    }
}

/* PROBLEM 3 */
/* The hardest of them all */

/* checks for equality */
int equalq(char* a, int i, char* b)
{
    int j=0;
    int l= strlen(b);
    for (j=0; j<l; j++){
        if (a[i++] != b[j]){
            return 0;
        }
    } return 1;
}

/*takes in a string, a string to search for within that string, 
 *a string to replace it with, and a string to store the result in*/

void find_replace(char* src, char* from, char* to, char* dest)
{
    int i=0;
    int k=0;
    int d=0;
    int slength= strlen(src);
    int fl= strlen(from);
    int tl= strlen(to);
    for (i=0; i<slength; i++){
        if(equalq(src, i, from)==0){
            dest[d++]=src[i];
        } else if (equalq(src,i,from)==1){
            for (k=0; k<tl; k++){
                dest[d++]= to[k];
                i += ((fl-1)-tl); /* I know my error is somewhere here but couldn't find it */
            }
        }
    } dest[++d]='\0';
}


















